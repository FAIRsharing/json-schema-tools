import json
import logging
from jinja2 import Template
from cedar.utils import set_template_element_property_minimals, set_sub_context, set_context


cedar_template_element = Template('''
{% set ignored = ["@context", "@type", "@id" ] %}
{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "@id": "",
    "@context": {{ TEMPLATE_CONTEXT | tojson }},
    "@type": "{{ TEMPLATE_TYPE }}",
    "type": "object",
    "title": "{{ title }} element schema", 
    "description": "{{ description }} ",
    "schema:name": "{{ id }}",
    "schema:description": "{{ description }}",
    "schema:schemaVersion": "1.4.0",
    "bibo:status":"bibo:draft",
    "pav:version":"0.1",
    "pav:createdOn": "{{NOW}}",
    "pav:lastUpdatedOn": "{{NOW}}",
    "pav:createdBy": "{{ USER_URL }}",
    "oslc:modifiedBy": "{{ USER_URL }}",
    "_ui": { 
        "order": [ 
            {% for item in properties %}
                {% if not item in props %} "{{ item }}" {% if not loop.last %},{% endif %} {% endif %}       
            {% endfor %} 
        ],
        "propertyLabels": {
            {% for item in properties %} 
                {% if not item in props %}  
                    "{{ item }}" : "{{ item }}"{% if not loop.last %},{% endif %} 
                {% endif %}
            {% endfor %}
        }
    },
    {% set requiredList = required %}
    "required":[
        "@context",
        "@id"
        {% for item in requiredList %}
            ,"{{item}}"{% if not loop.last %},{% endif %}
        {% endfor %}
    ],
    "properties": {
        {% for itemKey, itemVal in PROP_CONTEXT.items() %}    
            "{{itemKey}}": {{itemVal | tojson}} {% if not loop.last %},{% endif %}
        {% endfor %},
        {% for item in properties %}
            {% if not item in ignored %}            
                "{{item}}": {
                    "@context": {{ TEMPLATE_CONTEXT | tojson }},
                    "title": "{{ item }} field schema generated by {{MIRCAT}}",
                    "bibo:status":"bibo:draft",
                    "pav:version":"0.1",
                    "schema:description": "{{ item }}",  
                    "additionalProperties": false,
                    "oslc:modifiedBy": "{{ USER_URL }}",
                    "pav:createdOn": "{{NOW}}",
                    "_ui": {
                        "inputType": "textfield"
                    },
                    "description": "{{ item }} field schema autogenerated by {{ MIRCAT }}",
                    "pav:lastUpdatedOn": "{{NOW}}",
                    "required": [
                        "@value"
                    ],
                    "@type": "https://schema.metadatacenter.org/core/TemplateField",
                    "_valueConstraints": {
                        "requiredValue":{% if (requiredList is defined) and (item in requiredList) %} true {% else %} false {% endif%}
                    },
                    "pav:createdBy": "{{ USER_URL }}",
                    "schema:name": "{{ item }}",
                    "@id": "TODO",
                    "schema:schemaVersion": "1.3.0",
                    "type": "object",
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "properties": {
                        "@type": {
                            "oneOf": [
                                {
                                  "format": "uri",
                                  "type": "string"
                                },
                                {
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "type": "array",
                                    "items": {
                                        "format": "uri",
                                        "type": "string"
                                    }
                                }
                            ]
                        },
                        "@value": {
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "rdfs:label": {
                            "type": [
                                "string",
                                "null"
                            ]
                        }
                    }                                                               
                } {% if not loop.last %},{% endif %}
            {% endif %}
        {% endfor %}
    },
     "additionalProperties": {% if additionalProperties %} {{ additionalProperties }} {% else %} false {% endif%}
}
''')


def convert_template_element(schema_file_path):
    cedar_type = "https://schema.metadatacenter.org/core/TemplateElement"
    try:
        with open(schema_file_path, 'r') as orig_schema_file:

            schema_as_json = json.load(orig_schema_file)
            orig_schema_file.close()
            property_context = set_template_element_property_minimals(set_sub_context(schema_as_json))
            cedar_schema = cedar_template_element.render(schema_as_json,
                                                         TEMPLATE_TYPE=cedar_type,
                                                         TEMPLATE_CONTEXT=set_context(),
                                                         NOW="2018-05-30T06:43:49-0700",
                                                         USER_URL="https://metadatacenter.org/users/e856d779-6e24-4d72-a4e6-f7ae4b6419e2",
                                                         MIRCAT="mircat-tools",
                                                         PROP_CONTEXT=property_context)

            return cedar_schema

    except IOError:
        logging.error("Error opening schema file")


def json_pretty_dump(json_object, output_file):
    return json.dump(json_object,  output_file, sort_keys=False, indent=4, separators=(',', ': '))
