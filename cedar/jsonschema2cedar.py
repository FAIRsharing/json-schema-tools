import json
import logging
import datetime
from jinja2 import Template, Environment


CEDAR_TEMPLATE_ELEMENT_TYPE = "https://schema.metadatacenter.org/core/TemplateElement"


##TODO add required properties from the schema
##TODO extract the schema:name from the "id" property

cedar_tmpl_element = Template('''
{
"$schema": "http://json-schema.org/draft-04/schema#"
"@id": "",
"@type": {{ CEDAR_TEMPLATE_ELEMENT_TYPE }},
"@context": {
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "pav": "http://purl.org/pav/",
    "oslc": "http://open-services.net/ns/core#",
    "schema": "http://schema.org/",
    "schema:name": {
      "@type": "xsd:string"
    },
    "schema:description": {
      "@type": "xsd:string"
    },
    "pav:createdOn": {
      "@type": "xsd:dateTime"
    },
    "pav:createdBy": {
      "@type": "@id"
    },
    "pav:lastUpdatedOn": {
      "@type": "xsd:dateTime"
    },
    "oslc:modifiedBy": {
      "@type": "@id"
    }
  },
"type": "object",
"title": "{{ title }}" 
"description": "{{ title }} generated by the mircat2cedar python tool. "
"schema:name": "{{ id }}",
"schema:description": "{{ description }}",
"schema:schemaVersion": "1.3.0",
"_ui": { 
    "order": [ 
    {% for item in properties %}  "{{ item }}", 
    {% endfor %} ]
    "propertyLabels": {
    {% for item in properties %}   "{{ item }}" : "{{ item }}",
    {% endfor %} }
 }
  "pav:createdOn": "{{ DATE  }}",
  "pav:lastUpdatedOn": "{{ DATE  }}",
  "pav:createdBy": "mircat2cedar tool - ISA tools team"
  "oslc:modifiedBy": "mircat2cedar tool - ISA tools team",
  "required": [
    "@context",
    "@id"
  ],
 "additionalProperties": {% if additionalProperties %} "{{ additionalProperties }}" {% else %} "true" {% endif%}
}
''')



def convert_template_element(jsonschema_filename):
    try:
        with open(jsonschema_filename, 'r') as orig_schema_file:

            orig_schema = json.load(orig_schema_file)

            cedar_schema = cedar_tmpl_element.render(orig_schema, CEDAR_TEMPLATE_ELEMENT_TYPE= CEDAR_TEMPLATE_ELEMENT_TYPE, DATE= datetime.datetime.isoformat(datetime.datetime.now()))

            return cedar_schema

    except IOError:
        logging.error("Error opening schema file")






