import json
import logging
import datetime
from jinja2 import Template, Environment


CEDAR_TEMPLATE_ELEMENT_TYPE = "https://schema.metadatacenter.org/core/TemplateElement"

IGNORE_KEYS = [ "@id", "pav:createdOn", "pav:createdOn", "pav:createdBy", "pav:lastUpdatedOn", "oslc:modifiedBy", "title", "description"]


CONTEXT_TEMPLATE = {}
CONTEXT_TEMPLATE["xsd"]="http://www.w3.org/2001/XMLSchema#"
CONTEXT_TEMPLATE["pav"] = "http://purl.org/pav/"
CONTEXT_TEMPLATE["oslc"] = "http://open-services.net/ns/core#"
CONTEXT_TEMPLATE["schema"] = "http://schema.org/"
CONTEXT_TEMPLATE["schema:name"] = {}
CONTEXT_TEMPLATE["schema:name"]["@type"] = "xsd:string"
CONTEXT_TEMPLATE["schema:description"] = {}
CONTEXT_TEMPLATE["schema:description"]["@type"] = "xsd:string"
CONTEXT_TEMPLATE["pav:createdOn"] = {}
CONTEXT_TEMPLATE["pav:createdOn"]["@type"] = "xsd:dateTime"
CONTEXT_TEMPLATE["pav:createdBy"] = {}
CONTEXT_TEMPLATE["pav:createdBy"]["@type"] = "@id"
CONTEXT_TEMPLATE["pav:lastUpdatedOn"] = {}
CONTEXT_TEMPLATE["pav:lastUpdatedOn"]["@type"] = "xsd:dateTime"
CONTEXT_TEMPLATE["oslc:modifiedBy"] = {}
CONTEXT_TEMPLATE["oslc:modifiedBy"]["@type"] = "@id"


###TODO provide option to set "@id"  
##TODO add required properties from the schema
##TODO extract the schema:name from the "id" property

cedar_tmpl_element = Template('''
{% set props = ["@context", "@type"] %}
{
"$schema": "http://json-schema.org/draft-04/schema#",
"@id": "",
"@type": "{{ CEDAR_TEMPLATE_ELEMENT_TYPE }}",
"@context": {{ CONTEXT_TEMPLATE | tojson }},
"type": "object",
"title": "{{ title }} element schema", 
"description": "{{ title }} element generated by the mircat-tools. ",
"schema:name": "{{ id }}",
"schema:description": "{{ description }}",
"schema:schemaVersion": "1.4.0",
"_ui": { 
    "order": [ 
    {% for item in properties %}
        {% if not item in props %} "{{ item }}" {% if not loop.last %},{% endif %} {% endif %}       
    {% endfor %} ],
    "propertyLabels": {
    {% for item in properties %} {% if not item in props %}  "{{ item }}" : "{{ item }}"{% if not loop.last %},{% endif %} {% endif %}
    {% endfor %} }
 },
  "pav:createdOn": "{{ DATE  }}",
  "pav:lastUpdatedOn": "{{ DATE  }}",
  "pav:createdBy": "{{ MIRCAT }}",
  "oslc:modifiedBy": "{{ MIRCAT }}",
  "required": [
    "@context",
    "@id"
  ],
  {% set requiredList = required %}
  "properties": { 
  {% for item in properties %}
  
  "{{ item }}": {
      "@context": {{ CONTEXT_TEMPLATE | tojson }},
      "title": "{{ item }} field schema",
      "properties": {
        "@type": {
          "oneOf": [
            {
              "format": "uri",
              "type": "string"
            },
            {
              "uniqueItems": true,
              "minItems": 1,
              "type": "array",
              "items": {
                "format": "uri",
                "type": "string"
              }
            }
          ]
        },
        "@value": {
          "type": [
            {{ item.type }}
            "null"
          ]
        },
        "rdfs:label": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "schema:description": "{{ item }}",  
      "additionalProperties": false,
      "oslc:modifiedBy": "{{ MIRCAT2CEDAR }}",
      "pav:createdOn": "{{ DATE }}",
      "_ui": {
        "inputType": "textfield"
      },
      "description": "{{ item }} field schema autogenerated by {{ MIRCAT }}",
      "pav:lastUpdatedOn": "{{ DATE }}",
      "required": [
        "@value"
      ],
      "@type": "https://schema.metadatacenter.org/core/TemplateField",
      "_valueConstraints": {
        "requiredValue":{% if (requiredList is defined) and (item in requiredList) %} true, {% else %} false, {% endif%}
        "defaultValue": "{{title|lower}}1"
      },
      "pav:createdBy": "{{ MIRCAT }}",
      "schema:name": "{{ item }}",
      "@id": "TODO",
      "schema:schemaVersion": "1.3.0",
      "@context": {
        "schema": "http://schema.org/",
        "schema:description": {
          "@type": "xsd:string"
        },
        "pav": "http://purl.org/pav/",
        "pav:createdBy": {
          "@type": "@id"
        },
        "oslc:modifiedBy": {
          "@type": "@id"
        },
        "pav:createdOn": {
          "@type": "xsd:dateTime"
        },
        "oslc": "http://open-services.net/ns/core#",
        "schema:name": {
          "@type": "xsd:string"
        },
        "xsd": "http://www.w3.org/2001/XMLSchema#",
        "pav:lastUpdatedOn": {
          "@type": "xsd:dateTime"
        }
      },
      "type": "object",
      "$schema": "http://json-schema.org/draft-04/schema#"
    }{% if not loop.last %},{% endif %}
  {% endfor %}
  },
 "additionalProperties": {% if additionalProperties %} {{ additionalProperties }} {% else %} false {% endif%} 
}
''')

logger = logging.getLogger('jsonschema2cedar')
logger.setLevel(logging.DEBUG)

def convert_template_element(jsonschema_filename):
    try:
        with open(jsonschema_filename, 'r') as orig_schema_file:
            orig_schema = json.load(orig_schema_file)
            cedar_schema = cedar_tmpl_element.render(orig_schema,
                                                     CEDAR_TEMPLATE_ELEMENT_TYPE= CEDAR_TEMPLATE_ELEMENT_TYPE,
                                                     CONTEXT_TEMPLATE= CONTEXT_TEMPLATE,
                                                     DATE= datetime.datetime.isoformat(datetime.datetime.now()),
                                                     MIRCAT = "mircat-tools")
            logger.debug(cedar_schema)
            return cedar_schema

    except IOError:
        logging.error("Error opening schema file")


def json_pretty_dump(json_object, output_file):
    return json.dump(json_object,  output_file, sort_keys=False, indent=4, separators=(',', ': '))






